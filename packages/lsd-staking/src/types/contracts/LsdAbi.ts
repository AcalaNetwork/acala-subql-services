/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace UpgradeableStakingLST {
  export type ConvertInfoStruct = {
    convertedShareType: PromiseOrValue<string>;
    convertedExchangeRate: PromiseOrValue<BigNumberish>;
  };

  export type ConvertInfoStructOutput = [string, BigNumber] & {
    convertedShareType: string;
    convertedExchangeRate: BigNumber;
  };
}

export declare namespace Staking {
  export type RewardRuleStruct = {
    rewardRate: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    rewardRateAccumulated: PromiseOrValue<BigNumberish>;
    lastAccumulatedTime: PromiseOrValue<BigNumberish>;
  };

  export type RewardRuleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    rewardRate: BigNumber;
    endTime: BigNumber;
    rewardRateAccumulated: BigNumber;
    lastAccumulatedTime: BigNumber;
  };
}

export interface LsdAbiInterface extends utils.Interface {
  functions: {
    "DOT()": FunctionFragment;
    "HOMA()": FunctionFragment;
    "HOMA_MINT_THRESHOLD()": FunctionFragment;
    "LCDOT()": FunctionFragment;
    "LDOT()": FunctionFragment;
    "LIQUID_CROWDLOAN()": FunctionFragment;
    "MAX_REWARD_TYPES()": FunctionFragment;
    "STABLE_ASSET()": FunctionFragment;
    "TDOT()": FunctionFragment;
    "WTDOT()": FunctionFragment;
    "addPool(address)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "convertInfos(uint256)": FunctionFragment;
    "convertLSTPool(uint256,uint8)": FunctionFragment;
    "earned(uint256,address,address)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "lastTimeRewardApplicable(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paidAccumulatedRates(uint256,address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausedPoolOperations(uint256,uint8)": FunctionFragment;
    "poolIndex()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerShare(uint256,address)": FunctionFragment;
    "rewardRules(uint256,address)": FunctionFragment;
    "rewardTypes(uint256)": FunctionFragment;
    "rewards(uint256,address,address)": FunctionFragment;
    "rewardsDeductionRates(uint256)": FunctionFragment;
    "setPoolOperationPause(uint256,uint8,bool)": FunctionFragment;
    "setRewardsDeductionRate(uint256,uint256)": FunctionFragment;
    "shareTypes(uint256)": FunctionFragment;
    "shares(uint256,address)": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "totalShares(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstake(uint256,uint256)": FunctionFragment;
    "updateRewardRule(uint256,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOT"
      | "HOMA"
      | "HOMA_MINT_THRESHOLD"
      | "LCDOT"
      | "LDOT"
      | "LIQUID_CROWDLOAN"
      | "MAX_REWARD_TYPES"
      | "STABLE_ASSET"
      | "TDOT"
      | "WTDOT"
      | "addPool"
      | "claimRewards"
      | "convertInfos"
      | "convertLSTPool"
      | "earned"
      | "exit"
      | "initialize()"
      | "initialize(address,address,address,address,address,address,address,address)"
      | "lastTimeRewardApplicable"
      | "owner"
      | "paidAccumulatedRates"
      | "pause"
      | "paused"
      | "pausedPoolOperations"
      | "poolIndex"
      | "renounceOwnership"
      | "rewardPerShare"
      | "rewardRules"
      | "rewardTypes"
      | "rewards"
      | "rewardsDeductionRates"
      | "setPoolOperationPause"
      | "setRewardsDeductionRate"
      | "shareTypes"
      | "shares"
      | "stake"
      | "totalShares"
      | "transferOwnership"
      | "unpause"
      | "unstake"
      | "updateRewardRule"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DOT", values?: undefined): string;
  encodeFunctionData(functionFragment: "HOMA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "HOMA_MINT_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LCDOT", values?: undefined): string;
  encodeFunctionData(functionFragment: "LDOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LIQUID_CROWDLOAN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_TYPES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABLE_ASSET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TDOT", values?: undefined): string;
  encodeFunctionData(functionFragment: "WTDOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertLSTPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,address,address,address,address,address,address,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paidAccumulatedRates",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedPoolOperations",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "poolIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerShare",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRules",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDeductionRates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOperationPause",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDeductionRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shareTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardRule",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "DOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HOMA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HOMA_MINT_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LCDOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LDOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LIQUID_CROWDLOAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_TYPES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STABLE_ASSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TDOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WTDOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertLSTPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,address,address,address,address,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paidAccumulatedRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedPoolOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDeductionRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOperationPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDeductionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardRule",
    data: BytesLike
  ): Result;

  events: {
    "ClaimReward(address,uint256,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LSTPoolConverted(uint256,address,address,uint256,uint256)": EventFragment;
    "NewPool(uint256,address)": EventFragment;
    "OperationPauseStatusSet(uint256,uint8,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardRuleUpdate(uint256,address,uint256,uint256)": EventFragment;
    "RewardsDeductionRateSet(uint256,uint256)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Unstake(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LSTPoolConverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationPauseStatusSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRuleUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDeductionRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface ClaimRewardEventObject {
  sender: string;
  poolId: BigNumber;
  rewardType: string;
  amount: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ClaimRewardEventObject
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LSTPoolConvertedEventObject {
  poolId: BigNumber;
  beforeShareType: string;
  afterShareType: string;
  beforeShareTokenAmount: BigNumber;
  afterShareTokenAmount: BigNumber;
}
export type LSTPoolConvertedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  LSTPoolConvertedEventObject
>;

export type LSTPoolConvertedEventFilter =
  TypedEventFilter<LSTPoolConvertedEvent>;

export interface NewPoolEventObject {
  poolId: BigNumber;
  shareType: string;
}
export type NewPoolEvent = TypedEvent<[BigNumber, string], NewPoolEventObject>;

export type NewPoolEventFilter = TypedEventFilter<NewPoolEvent>;

export interface OperationPauseStatusSetEventObject {
  poolId: BigNumber;
  operation: number;
  paused: boolean;
}
export type OperationPauseStatusSetEvent = TypedEvent<
  [BigNumber, number, boolean],
  OperationPauseStatusSetEventObject
>;

export type OperationPauseStatusSetEventFilter =
  TypedEventFilter<OperationPauseStatusSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardRuleUpdateEventObject {
  poolId: BigNumber;
  rewardType: string;
  rewardRate: BigNumber;
  endTime: BigNumber;
}
export type RewardRuleUpdateEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RewardRuleUpdateEventObject
>;

export type RewardRuleUpdateEventFilter =
  TypedEventFilter<RewardRuleUpdateEvent>;

export interface RewardsDeductionRateSetEventObject {
  poolId: BigNumber;
  rate: BigNumber;
}
export type RewardsDeductionRateSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardsDeductionRateSetEventObject
>;

export type RewardsDeductionRateSetEventFilter =
  TypedEventFilter<RewardsDeductionRateSetEvent>;

export interface StakeEventObject {
  sender: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakeEventObject {
  sender: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface LsdAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LsdAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOT(overrides?: CallOverrides): Promise<[string]>;

    HOMA(overrides?: CallOverrides): Promise<[string]>;

    HOMA_MINT_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    LCDOT(overrides?: CallOverrides): Promise<[string]>;

    LDOT(overrides?: CallOverrides): Promise<[string]>;

    LIQUID_CROWDLOAN(overrides?: CallOverrides): Promise<[string]>;

    MAX_REWARD_TYPES(overrides?: CallOverrides): Promise<[BigNumber]>;

    STABLE_ASSET(overrides?: CallOverrides): Promise<[string]>;

    TDOT(overrides?: CallOverrides): Promise<[string]>;

    WTDOT(overrides?: CallOverrides): Promise<[string]>;

    addPool(
      shareType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertInfos(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[UpgradeableStakingLST.ConvertInfoStructOutput]>;

    convertLSTPool(
      poolId: PromiseOrValue<BigNumberish>,
      convertType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earned(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      dot: PromiseOrValue<string>,
      lcdot: PromiseOrValue<string>,
      ldot: PromiseOrValue<string>,
      tdot: PromiseOrValue<string>,
      homa: PromiseOrValue<string>,
      stableAsset: PromiseOrValue<string>,
      liquidCrowdloan: PromiseOrValue<string>,
      wtdot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paidAccumulatedRates(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausedPoolOperations(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPerShare(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardRules(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Staking.RewardRuleStructOutput]>;

    rewardTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    rewards(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDeductionRates(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setPoolOperationPause(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsDeductionRate(
      poolId: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shareTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    shares(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalShares(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardRule(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOT(overrides?: CallOverrides): Promise<string>;

  HOMA(overrides?: CallOverrides): Promise<string>;

  HOMA_MINT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  LCDOT(overrides?: CallOverrides): Promise<string>;

  LDOT(overrides?: CallOverrides): Promise<string>;

  LIQUID_CROWDLOAN(overrides?: CallOverrides): Promise<string>;

  MAX_REWARD_TYPES(overrides?: CallOverrides): Promise<BigNumber>;

  STABLE_ASSET(overrides?: CallOverrides): Promise<string>;

  TDOT(overrides?: CallOverrides): Promise<string>;

  WTDOT(overrides?: CallOverrides): Promise<string>;

  addPool(
    shareType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertInfos(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<UpgradeableStakingLST.ConvertInfoStructOutput>;

  convertLSTPool(
    poolId: PromiseOrValue<BigNumberish>,
    convertType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earned(
    poolId: PromiseOrValue<BigNumberish>,
    who: PromiseOrValue<string>,
    rewardType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address,address)"(
    dot: PromiseOrValue<string>,
    lcdot: PromiseOrValue<string>,
    ldot: PromiseOrValue<string>,
    tdot: PromiseOrValue<string>,
    homa: PromiseOrValue<string>,
    stableAsset: PromiseOrValue<string>,
    liquidCrowdloan: PromiseOrValue<string>,
    wtdot: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(
    poolId: PromiseOrValue<BigNumberish>,
    rewardType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paidAccumulatedRates(
    poolId: PromiseOrValue<BigNumberish>,
    who: PromiseOrValue<string>,
    rewardType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausedPoolOperations(
    poolId: PromiseOrValue<BigNumberish>,
    operation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolIndex(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPerShare(
    poolId: PromiseOrValue<BigNumberish>,
    rewardType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardRules(
    poolId: PromiseOrValue<BigNumberish>,
    rewardType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Staking.RewardRuleStructOutput>;

  rewardTypes(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  rewards(
    poolId: PromiseOrValue<BigNumberish>,
    who: PromiseOrValue<string>,
    rewardType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDeductionRates(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setPoolOperationPause(
    poolId: PromiseOrValue<BigNumberish>,
    operation: PromiseOrValue<BigNumberish>,
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsDeductionRate(
    poolId: PromiseOrValue<BigNumberish>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shareTypes(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  shares(
    poolId: PromiseOrValue<BigNumberish>,
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    poolId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalShares(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    poolId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardRule(
    poolId: PromiseOrValue<BigNumberish>,
    rewardType: PromiseOrValue<string>,
    rewardRate: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOT(overrides?: CallOverrides): Promise<string>;

    HOMA(overrides?: CallOverrides): Promise<string>;

    HOMA_MINT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    LCDOT(overrides?: CallOverrides): Promise<string>;

    LDOT(overrides?: CallOverrides): Promise<string>;

    LIQUID_CROWDLOAN(overrides?: CallOverrides): Promise<string>;

    MAX_REWARD_TYPES(overrides?: CallOverrides): Promise<BigNumber>;

    STABLE_ASSET(overrides?: CallOverrides): Promise<string>;

    TDOT(overrides?: CallOverrides): Promise<string>;

    WTDOT(overrides?: CallOverrides): Promise<string>;

    addPool(
      shareType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    convertInfos(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<UpgradeableStakingLST.ConvertInfoStructOutput>;

    convertLSTPool(
      poolId: PromiseOrValue<BigNumberish>,
      convertType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    "initialize(address,address,address,address,address,address,address,address)"(
      dot: PromiseOrValue<string>,
      lcdot: PromiseOrValue<string>,
      ldot: PromiseOrValue<string>,
      tdot: PromiseOrValue<string>,
      homa: PromiseOrValue<string>,
      stableAsset: PromiseOrValue<string>,
      liquidCrowdloan: PromiseOrValue<string>,
      wtdot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTimeRewardApplicable(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paidAccumulatedRates(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausedPoolOperations(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerShare(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRules(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Staking.RewardRuleStructOutput>;

    rewardTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    rewards(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDeductionRates(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPoolOperationPause(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsDeductionRate(
      poolId: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shareTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    shares(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalShares(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateRewardRule(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimReward(address,uint256,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      rewardType?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      rewardType?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimRewardEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LSTPoolConverted(uint256,address,address,uint256,uint256)"(
      poolId?: null,
      beforeShareType?: null,
      afterShareType?: null,
      beforeShareTokenAmount?: null,
      afterShareTokenAmount?: null
    ): LSTPoolConvertedEventFilter;
    LSTPoolConverted(
      poolId?: null,
      beforeShareType?: null,
      afterShareType?: null,
      beforeShareTokenAmount?: null,
      afterShareTokenAmount?: null
    ): LSTPoolConvertedEventFilter;

    "NewPool(uint256,address)"(
      poolId?: null,
      shareType?: null
    ): NewPoolEventFilter;
    NewPool(poolId?: null, shareType?: null): NewPoolEventFilter;

    "OperationPauseStatusSet(uint256,uint8,bool)"(
      poolId?: null,
      operation?: null,
      paused?: null
    ): OperationPauseStatusSetEventFilter;
    OperationPauseStatusSet(
      poolId?: null,
      operation?: null,
      paused?: null
    ): OperationPauseStatusSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardRuleUpdate(uint256,address,uint256,uint256)"(
      poolId?: null,
      rewardType?: null,
      rewardRate?: null,
      endTime?: null
    ): RewardRuleUpdateEventFilter;
    RewardRuleUpdate(
      poolId?: null,
      rewardType?: null,
      rewardRate?: null,
      endTime?: null
    ): RewardRuleUpdateEventFilter;

    "RewardsDeductionRateSet(uint256,uint256)"(
      poolId?: null,
      rate?: null
    ): RewardsDeductionRateSetEventFilter;
    RewardsDeductionRateSet(
      poolId?: null,
      rate?: null
    ): RewardsDeductionRateSetEventFilter;

    "Stake(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      amount?: null
    ): StakeEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Unstake(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      amount?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    DOT(overrides?: CallOverrides): Promise<BigNumber>;

    HOMA(overrides?: CallOverrides): Promise<BigNumber>;

    HOMA_MINT_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    LCDOT(overrides?: CallOverrides): Promise<BigNumber>;

    LDOT(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUID_CROWDLOAN(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_TYPES(overrides?: CallOverrides): Promise<BigNumber>;

    STABLE_ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    TDOT(overrides?: CallOverrides): Promise<BigNumber>;

    WTDOT(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      shareType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertInfos(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertLSTPool(
      poolId: PromiseOrValue<BigNumberish>,
      convertType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earned(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address,address)"(
      dot: PromiseOrValue<string>,
      lcdot: PromiseOrValue<string>,
      ldot: PromiseOrValue<string>,
      tdot: PromiseOrValue<string>,
      homa: PromiseOrValue<string>,
      stableAsset: PromiseOrValue<string>,
      liquidCrowdloan: PromiseOrValue<string>,
      wtdot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paidAccumulatedRates(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausedPoolOperations(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPerShare(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRules(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDeductionRates(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPoolOperationPause(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsDeductionRate(
      poolId: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shareTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalShares(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardRule(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HOMA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HOMA_MINT_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LCDOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LDOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUID_CROWDLOAN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REWARD_TYPES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STABLE_ASSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TDOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WTDOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      shareType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertInfos(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertLSTPool(
      poolId: PromiseOrValue<BigNumberish>,
      convertType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      dot: PromiseOrValue<string>,
      lcdot: PromiseOrValue<string>,
      ldot: PromiseOrValue<string>,
      tdot: PromiseOrValue<string>,
      homa: PromiseOrValue<string>,
      stableAsset: PromiseOrValue<string>,
      liquidCrowdloan: PromiseOrValue<string>,
      wtdot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paidAccumulatedRates(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedPoolOperations(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerShare(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRules(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      rewardType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDeductionRates(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPoolOperationPause(
      poolId: PromiseOrValue<BigNumberish>,
      operation: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDeductionRate(
      poolId: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shareTypes(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      poolId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalShares(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardRule(
      poolId: PromiseOrValue<BigNumberish>,
      rewardType: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
