# -------- COMMON -------- #
enum AccountType { SYSTEM, USER }

type Account @entity {
  id: ID! # user address
  address: String
  type: AccountType
  name: String

  # history
  mint: [Mint] @derivedFrom(field: "address")
  redeemRequestCancelled: [RedeemRequestCancelled] @derivedFrom(field: "address")
  requestedRedeem: [RequestedRedeem] @derivedFrom(field: "address")
  redeemedByUnbond: [RedeemedByUnbond] @derivedFrom(field: "address")
  redeemed: [Redeemed] @derivedFrom(field: "address")
  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
}

type Token @entity {
    id: ID! # token symbol

    name: String!
    decimals: Int!

    transfer: [Transfer] @derivedFrom(field: "token")
}



# -------- HOMA -------- # 
type Mint @entity {
  # homaLite: user, amount_staked, amount_minted
  # homa:     minter,staking_currency_amount, liquid_amount_received, liquid_amount_added_to_void
  id: ID!

  address: Account
  type: String

  amountStaked: BigInt
  amountMinted: BigInt
  stakingCurrencyAmount: BigInt
  liquidAmountReceived: BigInt
  liquidAmountAddedToVoid: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type RedeemRequestCancelled @entity {
  # homaLite: who, liquid_amount_unreserved
  # homa:     redeemer, cancelled_liquid_amount
  id: ID!

  address: Account
  amount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type RequestedRedeem @entity {
  # homa:     redeemer, liquid_amount, allow_fast_match
  id: ID!

  address: Account
  amount: BigInt
  allowFastMatch: Boolean

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type RedeemRequested @entity {
  # homalite: who, liquid_amount, extra_fee
  id: ID!

  address: Account
  amount: BigInt
  extraFee: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type RedeemedByUnbond @entity {
  # homa:  redeemer,era_index_when_unbond, liquid_amount, unbonding_staking_amount
  id: ID!

  address: Account
  eraIndexWhenUnbond: BigInt
  liquidAmount: BigInt
  unbondingStakingAmount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type Redeemed @entity {
  #homalite: user, staking_amount_redeemed, liquid_amount_deducted
  id: ID!

  address: Account
  stakingAmountRedeemed: BigInt
  liquidAmountDeducted: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type RedeemedByFastMatch @entity {
  id: ID!

  address: Account
  matchedLiquidAmount: BigInt
  feeInLiquid: BigInt
  redeemedStakingAmount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type Rate @entity {
  id: ID!

  totalStaking: BigInt
  totalLiquidity: BigInt
  totalVoidLiquid: BigInt
  exchangeRate: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

# ---------TRANSFER--------#
type Transfer @entity {
  id: ID! # ${from}-${to}-${extrinsic}

  from: Account!
  to: Account!
  token: Token!
  amount: BigInt!
  isSystemCall: Boolean!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

# -------- incentives -------- #
type DepositDexShare @entity {
  id: ID!

  address: Account
  token: Token

  amount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type WithdrawDexShare @entity {
  id: ID!

  address: Account
  token: Token

  amount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type PayoutRewards @entity {
  # who, pool_id, reward_currency_type, actual_payout, deduction_amount
  id: ID!

  address: Account
  token: Token
  pool: String

  actualPayout: BigInt
  deductionAmount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type ClaimRewards @entity {
  # who, pool_id, reward_currency_id, actual_amount, deduction_amount
  id: ID!

  address: Account
  token: Token
  pool: String

  actualAmount: BigInt
  deductionAmount: BigInt

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

# -------- auction -------- #
enum BidType {
  KICK,
  DENT,
  DEX_TAKE
}

enum AuctionStatus {
  IN_PROGRESS,
  CANCELL,
  DEALT,
  DEX_TAKE,
  ABORT
}

type CollateralAuction @entity {
  id: ID! # auction id
  collateral: String!
  initAmount: BigInt!
  amount: BigInt!
  target: BigInt!
  status: AuctionStatus!
  refundRecipient: String!
  lastBid: BigInt
  winner: String
  bidder: [String]

  create: [NewCollateralAuction] @derivedFrom(field: "auction")
  cancel: [CancelAuction] @derivedFrom(field: "auction")
  dealt: [CollateralAuctionDealt] @derivedFrom(field: "auction")
  dexTake: [DEXTakeCollateralAuction] @derivedFrom(field: "auction")
  abort: [CollateralAuctionAborted] @derivedFrom(field: "auction")
  bids: [Bid] @derivedFrom(field: "auction")

  createAt: Date!
  updateAt: Date!
  endAt: Date
  updateAtBlock: BigInt!
  createAtBlock: BigInt!
  endAtBlock: BigInt
  eventIndex: Int
}

type NewCollateralAuction @entity {
  id: ID! # event index
  auction: CollateralAuction
  collateral: String!
  amount: BigInt!
  target: BigInt!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type CancelAuction @entity {
  id: ID! # event index
  auction: CollateralAuction!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type CollateralAuctionDealt @entity {
  id: ID! # event index

  auction: CollateralAuction!
  collateral: String!
  amount: BigInt!
  winner: String!
  paymentAmount: BigInt!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type DEXTakeCollateralAuction @entity {
  id: ID! # event index

  auction: CollateralAuction!
  collateral: String!
  amount: BigInt!
  supplyCollateralAmount: BigInt!
  targetStableAmount: BigInt!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type CollateralAuctionAborted @entity {
  id: ID! #event index

  auction: CollateralAuction!
  collateral: String!
  amount: BigInt!
  targetStableAmount: BigInt!
  refundRecipient: String!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}

type Bid @entity {
  id: ID! # event index

  type: BidType! # insert an fack bid auction when auction kick off
  auction: CollateralAuction!
  bidder: String!
  amount: BigInt!
  collateralAmount: BigInt!

  blockNumber: BigInt!
  blockHash: String!
  extrinsic: String
  timestamp: Date
  eventIndex: Int
}